name: Publish Release

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag'
        required: true
    
permissions:
  id-token: write
  contents: write

jobs:

  tag:
    name: Tag + Branch
    runs-on: ubuntu-latest

    steps:
    - name: Check out code into the Go module directory
      uses: actions/checkout@v3

    - uses: azure/setup-kubectl@v3
      id: install

    - name: Update manifests
      env:
        TAG: "${{ github.event.inputs.tag }}"
      run: |
        sudo apt-get install -y gettext
        wget https://github.com/mikefarah/yq/releases/download/v4.30.4/yq_linux_amd64 -O yq
        chmod +x yq
        
        ./yq '.images.[].newTag |= env(TAG)' deploy/kubernetes/kustomize/overlays/published-images/kustomization.yaml
        mkdir -p dist/kubernetes dist/docker-compose
        kubectl kustomize deploy/kubernetes/kustomize/overlays/published-images/ > dist/kubernetes/deploy.yaml
        envsubst '$TAG' < deploy/docker-compose/docker-compose.yml > dist/docker-compose/docker-compose.yml
        
    - uses: stefanzweifel/git-auto-commit-action@v4
      with:
        commit_message: "Release ${{ github.event.inputs.tag }}"
        tagging_message: "${{ github.event.inputs.tag }}"
        branch: "release/${{ github.event.inputs.tag }}"
        create_branch: true

  images:
    name: Build Images
    needs: tag
    runs-on: ubuntu-latest

    steps:
    - name: Check out code into the Go module directory
      uses: actions/checkout@v3
      with:
        ref: ${{ github.event.inputs.tag }}

    - name: Set up QEMU
      id: qemu
      uses: docker/setup-qemu-action@v2
      with:
        image: tonistiigi/binfmt:latest
        platforms: all

    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v2

    - name: Build Images
      env:
        TAG: "${{ github.event.inputs.tag }}"
        SERVICE: ${{ matrix.service }}
      run: |
        # Build first to ensure all images create successfully
        scripts/build-image.sh -r 'public.ecr.aws/aws-containers' -t $TAG --multi-arch --actions-cache
        # Push all images
        scripts/build-image.sh -r 'public.ecr.aws/aws-containers' -t $TAG --multi-arch --actions-cache -p

  release:
    name: Release
    needs: [tag, images]
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
      with:
        ref: ${{ github.event.inputs.tag }}
        
    - name: Merge to main
      uses: devmasx/merge-branch@master
      with:
        type: now
        from_branch: ${{ github.event.inputs.tag }}
        target_branch: main
        github_token: ${{ github.token }}
    
    - name: Create GitHub release
      uses: ncipollo/release-action@v1
      with:
        tag: ${{ github.event.inputs.tag }}
        name: Release ${{ github.event.inputs.tag }}
        body: Published release ${{ github.event.inputs.tag }}
